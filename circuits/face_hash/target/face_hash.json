{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":14421311378804905158,"abi":{"parameters":[{"name":"x","type":{"kind":"array","length":128,"type":{"kind":"struct","path":"quantized::quantized::Quantized","fields":[{"name":"x","type":{"kind":"field"}}]}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"5dzNattAGIXhe9Haizkz3/z5VkoJsi0HgZCMLReKyb1XCVEbaGkWhS707iJ7LHxWeUjs99GcusP9+akfz9Ot2X95NMN0bOd+GperR+PeHrpd2vH16ja317nZex92TTeelp9yfNk1537omn3Sy+63oyH696Om9Oto+cNR70tdbxuc//thBbceVvDlk8POr+9CLsWPh7/uGm1/ot/+xLD9ibb9iXH7E9P2J+btTyzbn1gBv/oJvAH4RgDgCCAcGWAjwDgCIEcA5QjAHAGc4wHO8YS/4wCc4wHO8QbYCHCOBzjHA5zjAc7xAOcEgHMCwDmB8A8rgHOCATYCnBMAzgkA5wSAcwLAOQZwjgGcYwDnGOGTOQbYCHCOAZxjAOcYwDkGcE4EOCcCnBMBzokA50QDbAQ4JwKcEwHOiQDnRIBzEsA5CeCcBHBOAjgnGWAj4btWAOckgHMSwDkJ4JwMcE4GOCcDnJMBzskG2AhwTiZ8qRzgnAxwTgY4pwCcUwDOKQDnFIBzigE2ApxTAM4phHoOwDkF4JwKcE4FOKcCnFMBzqkG2AhwTgU4pwKcUwmZQEQnkBAKdIRSoCOkAh2hFeiMMJJQC3SEXKAj9AIdIRjoCOJhpJEJ4kHEkRF1ZEQeGdFHRgSSEYVkRCKZ0EgWIZIsQiVZhEyyCJ1kEULJIpSSRUgli9BKFiGWLEItWYRcsgi9ZBGCySIUk0VIJovQTBYhmixCNVmEbLII3WQRwskilJNFSCeL0E4WIZ4sQj1ZhHyyCP1kEQLKIhSURUgoi9BQFiGiLEJFWYSMsggdZRFCyiKUlEVIKYvQUhYhpixCTVmEnLIIPWURgsoiFJX1X5PKWennbYP75H3nvL4H5er/bWQmjCxbH7lcHK79MPTPT8N0bOd+Gm/LS5eHv7XXvj0M3fvl+T4ePzw7f7+sz6yvv1ynY3e6X7vXO709t9z+Bw==","file_map":{"61":{"source":"use dep::quantized::quantized::Quantized;\n\nfn main(x: [Quantized; 128]) -> pub Field {\n    // Return hash of the registered face\n    let mut field_arr = [0;128];\n    for i in 0..128 {\n      field_arr[i] = x[i].x;\n    }\n    poseidon::poseidon2::Poseidon2::hash(field_arr, 128)\n}","path":"/Users/elena/Documents/hashcloak/learning/hackathons/2025/noirhack/zkface-demo/circuits/face_hash/src/main.nr"},"68":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/elena/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr"}},"names":["main"],"brillig_names":[]}