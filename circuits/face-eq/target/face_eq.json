{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":14015637249164247113,"abi":{"parameters":[{"name":"x","type":{"kind":"array","length":128,"type":{"kind":"struct","path":"quantized::quantized::Quantized","fields":[{"name":"x","type":{"kind":"field"}}]}},"visibility":"private"},{"name":"registered","type":{"kind":"array","length":128,"type":{"kind":"struct","path":"quantized::quantized::Quantized","fields":[{"name":"x","type":{"kind":"field"}}]}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"61":{"source":"use dep::quantized::quantized::Quantized;\n\n// Prove that you match a registered face\npub fn main(x: [Quantized; 128], registered: [Quantized; 128]) -> pub Field {\n    let mut sum: Quantized = Quantized::new(0);\n\n    for i in 0..128 {\n      let diff = x[i] - registered[i];\n      sum += diff;\n    }\n\n    // Match threshold = 1_500_000_000\n    assert(sum < Quantized::new(98304000000000));\n    // Return hash of the registered face\n    let mut field_arr = [0;128];\n    for i in 0..128 {\n      field_arr[i] = registered[i].x;\n    }\n    poseidon::poseidon2::Poseidon2::hash(field_arr, 128)\n\n}\n","path":"/Users/elena/Documents/hashcloak/learning/hackathons/2025/noirhack/zkface-demo/circuits/face-eq/src/main.nr"},"68":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/elena/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr"},"71":{"source":"use std::cmp::Ordering;\nuse std::field::bn254::decompose;\nuse std::ops::{Add, Div, Mul, Sub};\n\n// IMPORTANT: This library is designed to work with a fixed scale factor of 2^16\n// See further explanation in the `Quantized` struct comments below.\nglobal scale: Field = 65536; // 2^16\n\n// A signed fixed-point number `x` is represented in a single Field element.\n//\n// Representation Overview:\n// A Field element is a type with 254 bits.\n// We only use the first 126 or the last 126 bits.\n// A positive number is within the first 126 bits.\n// A negative numbers is within the last 126 bits.\n// The \"middle\" 2 bits that are left over, should not be used.\n// - Positive values have bits set in the lower part: |x_0,x_1,x_2,..,x_125, ... ,_,_,_,_|\n// - Negative values have bits set in the upper part: |_,_,_,_, .. x_128,x_129,..,x_253|\n// So following above visual, x_126 and x_127 MUST be 0\n//\n// Modular arithmetic ensures correct handling of signed fixed-point numbers by wrapping\n// values around the field's modulus. For example, subtracting 5 from 3 in a field with\n// modulus `p` results in (3 - 5) mod p = p - 2, representing -2. This behavior allows\n// negative values to be correctly encoded in the field's upper range.\n//\n// Scaling:\n// Since fields do not inherently support decimal values, the fixed-point representation\n// uses a scale of 2^-16. This means that:\n// - `Quantized { x: 1 }` represents the value 1/2^16.\n// - To represent an original value, divide it by the scale, truncate, and store the result.\n// Example:\n// - Original value: 0.001\n// - Scaled value: 0.001 * 2^16 = 65.536\n// - Truncated result: 65 (stored as `Quantized { x: 65 }`)\n//\n// Overflow and overflow prevention:\n// To make sure the arithmetic performed on a value will not overflow, the library contains\n// bitsize checks that prevent numbers from growing larger than 126 bits. More concretely:\n// - multiplication: inputs must have bitsize <= 63\n// - addition: inputs must have bitsize <=125\n// - subtraction: inputs must have bitsize <=125\n//\n// Conversion Steps to `Quantized`:\n// 1. Check if the original value `x` is negative. If negative, use (p - |x|), where `p` is\n//    the field's prime modulus. Otherwise, proceed with `x`.\n// 2. Multiply the value by the scale factor (e.g., 2^16).\n// 3. Store the scaled value in a `Quantized` struct.\n//\n// Prime Modulus:\n// The field modulus `p` used in this implementation is:\n//   p = 21888242871839275222246405745257275088548364400416034343698204186575808495617\n// This prime comes from the Barretenberg backend.\npub struct Quantized {\n    pub x: Field,\n}\n\n// returns 1 for a negative element, 0 for a positive element\n// A Quantized element is negative if the upper bits are set, so this is what we check for.\n// NOTE: this asserts the field contains has maximum 126 bits. If the element contains more than\n// 126 bits either way, this function cannot correctly indicate whether it's negative or not.\nfn is_negative(x: Field) -> Field {\n    let (lower_bytes, higher_bytes) = decompose(x);\n    if higher_bytes == 0 {\n        // Make sure the number is not overflowing the 126 bits\n        x.assert_max_bit_size::<126>();\n        0\n    } else {\n        1\n    }\n}\n\nimpl Quantized {\n    // Assert that number of bits <= bitsize\n    // if quantized is negative, it counts the bits backwards\n    // NOTE: this works only for bitsize <= 126, because decompose gives us\n    // 128 and 126 bits\n    pub fn assert_bitsize<let bitsize: u32>(self: Self) {\n        // Decomposes into two 128 bits chunks\n        let (lower_bytes, higher_bytes) = decompose(self.x);\n        if higher_bytes == 0 {\n            // positive number\n            self.x.assert_max_bit_size::<bitsize>();\n        } else {\n            // negative number\n            (-self.x).assert_max_bit_size::<bitsize>();\n        }\n    }\n\n    pub fn zero() -> Self {\n        Quantized { x: 0 }\n    }\n\n    pub fn new(x: Field) -> Self {\n        let res = Self { x: x };\n        res.assert_bitsize::<126>();\n        res\n    }\n\n    fn add(self: Self, other: Self) -> Self {\n        // To prevent overflow, allow max 125 bits for both inputs\n        self.assert_bitsize::<125>();\n        other.assert_bitsize::<125>();\n        Quantized { x: self.x + other.x } // if one is negative, this wraps around automatically\n    }\n\n    fn sub(self: Self, other: Self) -> Self {\n        // To prevent overflow, allow max 125 bits for both inputs\n        self.assert_bitsize::<125>();\n        other.assert_bitsize::<125>();\n        Quantized { x: self.x - other.x }\n    }\n\n    fn mul(self: Self, other: Self) -> Self {\n        // To prevent overflow, allow max 63 bits for both inputs\n        // Perform multiplication of the underlying field elements\n        // This doubles the scale.\n        self.assert_bitsize::<63>();\n        other.assert_bitsize::<63>();\n        let mut temp: Field = self.x * other.x;\n\n        // Scale down by dividing by 2^16\n        // Since the scale is a multiple of 2^8, this will scale it down correctly.\n        // Note that we have to take care of the case that the value is negative; in that case we flip the sign\n        // temporarily, and flip it back at the end. Otherwise the division doesn't work\n\n        // Check whether we're working with a negative value\n        let negative = is_negative(temp);\n\n        temp = negative\n            * (\n                21888242871839275222246405745257275088548364400416034343698204186575808495616 - temp\n                    + 1\n                    - temp\n            )\n            + temp;\n\n        // Division by 2^16, code as suggested by Tom French @TomAFrench\n        // Cast x to a u16 to preserve only the lowest 16 bits.\n        let lowest_16_bits = temp as u16;\n\n        // Subtract off the lowest 16 bits so they are cleared.\n        let temp_with_cleared_lower_bits = temp - lowest_16_bits as Field;\n\n        // The lowest 16 bits are clear, `x_with_cleared_lower_bits` is divisible by `65536`,\n        // therefore field division is equivalent to integer division.\n        let mut final_res: Field = temp_with_cleared_lower_bits / 65536;\n\n        // If the result was originally negative, flip the sign back\n        final_res = negative\n            * (\n                21888242871839275222246405745257275088548364400416034343698204186575808495616\n                    - final_res\n                    + 1\n                    - final_res\n            )\n            + final_res;\n\n        // Return the result as a new Quantized instance\n        Quantized { x: final_res }\n    }\n\n    fn div(self: Self, other: Self) -> Self {\n        // Ensure `other` is not zero\n        assert(other.x != 0, \"Division by zero is not allowed.\");\n        self.assert_bitsize::<109>(); // will be multiplied by scale later, so we allow 126-17 bits\n        other.assert_bitsize::<126>(); // standard bitsize check\n        // Flip signs of numerator and denominator if negative, work with their absolute values\n        let mut numerator = self.x;\n        let mut denominator = other.x;\n\n        let mut numerator_is_negative = is_negative(numerator);\n        let mut denominator_is_negative = is_negative(denominator);\n\n        numerator = numerator_is_negative\n            * (\n                21888242871839275222246405745257275088548364400416034343698204186575808495616\n                    - numerator\n                    + 1\n                    - numerator\n            )\n            + numerator;\n\n        denominator = denominator_is_negative\n            * (\n                21888242871839275222246405745257275088548364400416034343698204186575808495616\n                    - denominator\n                    + 1\n                    - denominator\n            )\n            + denominator;\n\n        // Scale numerator before division\n        let scaled_numerator = numerator * scale;\n\n        // Cast to U128 for division\n        let scaled_numerator_u128 = U128::from_le_bytes(scaled_numerator.to_le_bytes());\n        let denominator_u128 = U128::from_le_bytes(denominator.to_le_bytes());\n\n        // Perform the division in U128\n        let result_u128 = scaled_numerator_u128 / denominator_u128;\n\n        // Cast back to Field\n        let mut result = Field::from_le_bytes(result_u128.to_le_bytes());\n\n        // Determine the sign of the result\n        let result_is_negative = numerator_is_negative + denominator_is_negative == 1;\n\n        // If result is negative, flip sign back\n        if result_is_negative {\n            result = 21888242871839275222246405745257275088548364400416034343698204186575808495616\n                - result\n                + 1;\n        }\n\n        Quantized { x: result }\n    }\n}\n\nimpl Add for Quantized {\n    fn add(self, other: Self) -> Self {\n        self.add(other)\n    }\n}\n\nimpl Sub for Quantized {\n    fn sub(self, other: Self) -> Self {\n        self.sub(other)\n    }\n}\n\nimpl Mul for Quantized {\n    fn mul(self, other: Self) -> Self {\n        self.mul(other)\n    }\n}\n\nimpl Div for Quantized {\n    fn div(self, other: Self) -> Self {\n        self.div(other)\n    }\n}\n\nimpl Ord for Quantized {\n    fn cmp(self: Self, other: Self) -> Ordering {\n        if self.x == other.x {\n            Ordering::equal()\n        } else {\n            let (_, sub_hi) = decompose(self.x - other.x);\n            if sub_hi == 0 {\n                Ordering::greater()\n            } else {\n                Ordering::less()\n            }\n        }\n    }\n}\n\n#[test]\nfn test_order() {\n    // Test 1: comparison between positive and negative value.\n    // a = 0.2 and b = -0.2\n    let a: Field = 13107;\n    let a_quantized = Quantized { x: a };\n    let b = 21888242871839275222246405745257275088548364400416034343698204186575808482510;\n    let b_quantized = Quantized { x: b };\n    assert(a_quantized > b_quantized);\n\n    // Test 2: comparison between two possitive numbers.\n    // a = 1 and b = 0.2.\n    // Then a * 2^16 = 65536\n    let a: Field = 65536;\n    let a_quantized = Quantized { x: a };\n    let b = 13107;\n    let b_quantized = Quantized { x: b };\n    assert(a_quantized > b_quantized);\n\n    // Test 3: comparison between two possitive numbers where the roles are\n    // inverted.\n    // a = 1 and b = 1.2.\n    // Then a * 2^16 = 65536\n    let a: Field = 65536;\n    let a_quantized = Quantized { x: a };\n    let b = 78643;\n    let b_quantized = Quantized { x: b };\n    assert(a_quantized < b_quantized);\n\n    // Test 4: comparison between two negative numbers.\n    // a = -1 and b = -0.2.\n    // Then a * 2^16 = -65536 therefore taking mod p we obtain that\n    // a = 21888242871839275222246405745257275088548364400416034343698204186575808430081\n    // b = 21888242871839275222246405745257275088548364400416034343698204186575808482510\n    let a: Field = 21888242871839275222246405745257275088548364400416034343698204186575808430081;\n    let a_quantized = Quantized { x: a };\n    let b = 21888242871839275222246405745257275088548364400416034343698204186575808482510;\n    let b_quantized = Quantized { x: b };\n    assert(a_quantized < b_quantized);\n\n    // 21888242871839275222246405745257275088548364400416034343698204186575808495617 - 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efff8001\n    // - 32768\n    // 21888242871839275222246405745257275088548364400416034343698204186575808495617 - 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effb0001\n    let a = Quantized { x: 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efff8001 };\n    // - 327680\n    let b = Quantized { x: 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effb0001 };\n    assert(a > b);\n}\n\n#[test]\nfn test_is_negative() {\n    // Test 1: checking if it's negative for a positive value.\n    // a = 0.2   =>   0.2 * 2^16 = 13107\n    let a: Field = 13107;\n    assert(is_negative(a) == 0);\n\n    // Test 2: checking if it's negative for a negative value.\n    // a = -0.2  =>   -0.2 * 2^16 = -13107\n    // Hence, -13107 mod p = p - 13107 = 21888242871839275222246405745257275088548364400416034343698204186575808482510\n    let a = 21888242871839275222246405745257275088548364400416034343698204186575808482510;\n    assert(is_negative(a) == 1);\n\n    // Test 3: checing if it's negative for a negative larger value.\n    // a = -1301.34  =>  -1301.34 * 2^16 = -85284618\n    // Hence, -85284618 mod p = p - 85284618 = 21888242871839275222246405745257275088548364400416034343698204186575723210999\n    let a = 21888242871839275222246405745257275088548364400416034343698204186575723210999;\n    assert(is_negative(a) == 1);\n}\n\n#[test]\nfn test_add() {\n    // Max value 2^60-1, positive and negative\n    let a = 1152921504606846975;\n    let b = -1152921504606846975;\n    let a_quantized = Quantized { x: a };\n    let b_quantized = Quantized { x: b };\n    let addition_quantized = a_quantized + b_quantized;\n    assert(addition_quantized.x == 0);\n\n    // Test case 1: Max value 2^60 - 1, positive and zero\n    let a1 = 1152921504606846975;\n    let b1 = 0;\n    let a1_quantized = Quantized { x: a1 };\n    let b1_quantized = Quantized { x: b1 };\n    let addition1_quantized = a1_quantized + b1_quantized;\n    assert(addition1_quantized.x == a1);\n\n    // Test case 2: Small positive values\n    let a2 = 12345;\n    let b2 = 67890;\n    let a2_quantized = Quantized { x: a2 };\n    let b2_quantized = Quantized { x: b2 };\n    let addition2_quantized = a2_quantized + b2_quantized;\n    assert(addition2_quantized.x == (a2 + b2));\n\n    // Test case 3: Positive and negative values resulting in a non-zero positive result\n    let a3 = 50000;\n    let b3 = -30000;\n    let a3_quantized = Quantized { x: a3 };\n    let b3_quantized = Quantized { x: b3 };\n    let addition3_quantized = a3_quantized + b3_quantized;\n    assert(addition3_quantized.x == 20000);\n\n    // Test case 4: Positive and negative values resulting in a non-zero negative result\n    let a4 = 30000;\n    let b4 = -50000;\n    let a4_quantized = Quantized { x: a4 };\n    let b4_quantized = Quantized { x: b4 };\n    let addition4_quantized = a4_quantized + b4_quantized;\n    assert(addition4_quantized.x == -20000);\n\n    // Test case 5: Add two negative values resulting in a negative value\n    let a5 = -40000;\n    let b5 = -20000;\n    let a5_quantized = Quantized { x: a5 };\n    let b5_quantized = Quantized { x: b5 };\n    let addition5_quantized = a5_quantized + b5_quantized;\n    assert(addition5_quantized.x == -60000);\n}\n\n#[test]\nfn test_mul() {\n    // Test case 1: Small positive values\n    let a1 = 12345; // original value 12345/2^16 = 0.1883697509765625\n    let b1 = 67890; // original value 67890/2^16 = 1.035919189453125\n    let a1_quantized = Quantized { x: a1 };\n    let b1_quantized = Quantized { x: b1 };\n    // new value = 0.1883697509765625 * 1.035919189453125 = 0.1951358397491276264190673828125\n    // x = 0.1951358397491276264190673828125 * 2^16 = 12788.422393798828125 => 12788\n    let mult1_quantized = a1_quantized * b1_quantized;\n    assert(mult1_quantized.x == 12788);\n\n    // Test case 2: Large positive values\n    let a2 = 1152921504606846975; // Max value 2^60 - 1, original 1152921504606846975/2^16 = 17592186044415.9999847412109375\n    let b2 = 2; // original 2/2^16 = 0.000030517578125\n    let a2_quantized = Quantized { x: a2 };\n    let b2_quantized = Quantized { x: b2 };\n    let mult2_quantized = a2_quantized * b2_quantized;\n    // 17592186044415.9999847412109375 * 0.000030517578125 = 536870911.9999999995343387126922607421875\n    // x/2^16 = value;  mult by 2^16 and truncate to whole number => x = 35184372088831\n    assert(mult2_quantized.x == 35184372088831);\n\n    // Test case 3: Large positive and small positive value\n    let a3 = 1152921504606846975; // Max value 2^60 - 1, original 1152921504606846975/2^16 = 17592186044415.9999847412109375\n    let b3 = 1; // original value 1/2^16 = 0.0000152587890625\n    let a3_quantized = Quantized { x: a3 };\n    let b3_quantized = Quantized { x: b3 };\n    // mul = 17592186044415.9999847412109375 * 0.0000152587890625 = 268435455.99999999976716935634613037109375\n    let mult3_quantized = a3_quantized * b3_quantized;\n    // mul * 2^16 = 17592186044415.9999847412109375\n    assert(mult3_quantized.x == 17592186044415);\n\n    // Test case 4: Positive and negative value\n    let a4 = 40000; // Original value 40000/2^16 = 0.6103515625\n    let b4 = -30000; // Original value -0.457763671875\n    let a4_quantized = Quantized { x: a4 };\n    let b4_quantized = Quantized { x: b4 };\n\n    // 0.6103515625 * -0.457763671875 = -0.2793967723846435546875\n    let mult4_quantized = a4_quantized * b4_quantized;\n    // -0.2793967723846435546875 * 2^16 = -18310.546875\n    assert(mult4_quantized.x == -18310);\n\n    // Test case 5: Both values negative\n    let a5 = -40000; // Original value -40000 / 2^16 = -0.6103515625\n    let b5 = -20000; // -0.30517578125\n    let a5_quantized = Quantized { x: a5 };\n    let b5_quantized = Quantized { x: b5 };\n    // -0.6103515625 *  -0.30517578125 = 0.186264514923095703125\n    let mult5_quantized = a5_quantized * b5_quantized;\n    // Expected result: 12207.03125\n    assert(mult5_quantized.x == 12207);\n}\n\n#[test]\nfn test_sub() {\n    let a = 1152921504606846975;\n    let b = 1152921504606846975;\n    let a_quantized = Quantized { x: a };\n    let b_quantized = Quantized { x: b };\n    let addition_quantized = a_quantized - b_quantized;\n    assert(addition_quantized.x == 0);\n\n    let a1 = 1152921504606846975;\n    let b1 = 0;\n    let a1_quantized = Quantized { x: a1 };\n    let b1_quantized = Quantized { x: b1 };\n    let addition1_quantized = a1_quantized - b1_quantized;\n    assert(addition1_quantized.x == a1);\n\n    let a1 = 1152921504606846975;\n    let b1 = 0;\n    let a1_quantized = Quantized { x: a1 };\n    let b1_quantized = Quantized { x: b1 };\n    let addition1_quantized = b1_quantized - a1_quantized;\n    // The result should be -a1, which means it is p - a1 in the field because\n    // of the wrap around.\n    let result = 21888242871839275222246405745257275088548364400416034343697051265071201648642;\n    assert(addition1_quantized.x == result);\n\n    let a2 = 12345;\n    let b2 = 67890;\n    let a2_quantized = Quantized { x: a2 };\n    let b2_quantized = Quantized { x: b2 };\n    let addition2_quantized = a2_quantized + b2_quantized;\n    assert(addition2_quantized.x == (a2 + b2));\n}\n\n#[test]\nfn test_division() {\n    // Field modulus\n    let p: Field = 0;\n\n    // Test case 1: Division with small positive values\n    let a1 = Quantized { x: 98304 }; // Represents 1.5 (scaled)\n    let b1 = Quantized { x: 65536 }; // Represents 1.0 (scaled)\n    let result1 = a1 / b1; // 1.5 / 1.0 = 1.5\n    assert(result1.x == 98304); // Scaled result for 1.5\n\n    // Test case 2: Division resulting in a smaller value\n    let a2 = Quantized { x: 65536 }; // Represents 1.0 (scaled)\n    let b2 = Quantized { x: 98304 }; // Represents 1.5 (scaled)\n    let result2 = a2 / b2; // 1.0 / 1.5 = 0.666...\n    assert(result2.x == 43690); // Scaled result for ~0.6667\n\n    // Test case 3: Negative divided by positive\n    let a3 = Quantized { x: p - 98304 }; // Represents -1.5 (scaled)\n    let b3 = Quantized { x: 65536 }; // Represents 1.0 (scaled)\n    let result3 = a3 / b3; // -1.5 / 1.0 = -1.5\n    assert(result3.x == p - 98304); // Correctly negative\n\n    // Test case 4: Positive divided by negative\n    let a4 = Quantized { x: 98304 }; // Represents 1.5 (scaled)\n    let b4 = Quantized { x: p - 65536 }; // Represents -1.0 (scaled)\n    let result4 = a4 / b4; // 1.5 / -1.0 = -1.5\n    assert(result4.x == p - 98304); // Correctly negative\n\n    // Test case 5: Both negative values\n    let a5 = Quantized { x: p - 98304 }; // Represents -1.5 (scaled)\n    let b5 = Quantized { x: p - 65536 }; // Represents -1.0 (scaled)\n    let result5 = a5 / b5; // -1.5 / -1.0 = 1.5\n    assert(result5.x == 98304); // Scaled result for 1.5\n}\n\n#[test]\nfn test_large_values_division() {\n    // Field modulus\n    let p: Field = 0;\n\n    // Test case 1: Large positive values\n    let a1 = Quantized { x: 1152921504606846976 }; // Represents 17592186044416.0 (scaled)\n    let b1 = Quantized { x: 576460752303423488 }; // Represents 8796093022208.0 (scaled)\n    let result1 = a1 / b1; // 17592186044416.0 / 8796093022208.0 = 2.0\n    assert(result1.x == 131072); // Scaled result for 2.0\n\n    // Test case 2: Large positive divided by a larger positive\n    let a2 = Quantized { x: 576460752303423488 }; // Represents 8796093022208.0 (scaled)\n    let b2 = Quantized { x: 1152921504606846976 }; // Represents 17592186044416.0 (scaled)\n    let result2 = a2 / b2; // 8796093022208.0 / 17592186044416.0 = 0.5\n    assert(result2.x == 32768); // Scaled result for 0.5\n\n    // Test case 3: Large negative divided by large positive\n    let a3 = Quantized { x: p - 1152921504606846976 }; // Represents -17592186044416.0 (scaled)\n    let b3 = Quantized { x: 576460752303423488 }; // Represents 8796093022208.0 (scaled)\n    let result3 = a3 / b3; // -17592186044416.0 / 8796093022208.0 = -2.0\n    assert(result3.x == p - 131072); // Correctly negative\n\n    // Test case 4: Large positive divided by large negative\n    let a4 = Quantized { x: 1152921504606846976 }; // Represents 17592186044416.0 (scaled)\n    let b4 = Quantized { x: p - 576460752303423488 }; // Represents -8796093022208.0 (scaled)\n    let result4 = a4 / b4; // 17592186044416.0 / -8796093022208.0 = -2.0\n    assert(result4.x == p - 131072); // Correctly negative\n\n    // Test case 5: Both large negative values\n    let a5 = Quantized { x: p - 1152921504606846976 }; // Represents -17592186044416.0 (scaled)\n    let b5 = Quantized { x: p - 576460752303423488 }; // Represents -8796093022208.0 (scaled)\n    let result5 = a5 / b5; // -17592186044416.0 / -8796093022208.0 = 2.0\n    assert(result5.x == 131072); // Scaled result for 2.0\n}\n\n#[test(should_fail)]\nfn test_division_by_zero() -> Quantized {\n    Quantized { x: 65536 } / Quantized { x: 0 }\n}\n","path":"/Users/elena/nargo/github.com/hashcloak/noir-fixed-point/v0.1.3/src/quantized.nr"}},"names":["main"],"brillig_names":["decompose_hint","lte_hint","directive_invert"]}